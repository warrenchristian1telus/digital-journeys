{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PSA - Digital Journeys Welcome to the dev documentation for the Digital Journeys solution, a form Builder and Workflow manager built on top of formsflow.ai . About The Project This repo contains a BC Gov branded version of formsflow.ai that will support public facing and internal Digital Journeys used by PSA and their employees. Contributing? Checkout our github repo to get started with some development! Get Started","title":"Home"},{"location":"#about-the-project","text":"This repo contains a BC Gov branded version of formsflow.ai that will support public facing and internal Digital Journeys used by PSA and their employees.","title":"About The Project"},{"location":"#contributing","text":"Checkout our github repo to get started with some development! Get Started","title":"Contributing?"},{"location":"forms/","text":"Forms Table of Contents Calculated Form Values Examples Auto-populate form fields Calculated Form Values If you would like a certain form field to have a calculated value based on the input from previous fields it could potentially require the use of some custom javascript code. These calculations can be made by selected the field you wish to contain the calculated value and clicking on it's gear icon. - Navigate to the Data tab at the top - Scroll down to the Calculated Value section and click to expand - This will show some general instructions on how to add calculations Examples Telework Calculated \"Number of days teleworking in a week\" Calculate a value based on the number of boxes checked representing days of the week: The following code snippet checks each checkbox contained within the theEmployeesScheduleWillBe field of the form and adds it to the value of this field if it has been checked. value = Object.keys(data.theEmployeesTeleworkScheduleWillBe).reduce((acc, key) => { if (data.theEmployeesTeleworkScheduleWillBe[key] === true) { acc++ } return acc; },0) How to auto-populate form fields with the user data If you would like to automatically populate a form's field with the user's data, you can do so by adding one of the pre-defined names to a field in your form. Follow these steps to add the user's data to a field: Step 1: Look at the pre-defined values along with their names in table below or from /forms-flow-api/src/formsflow_api/models/employee_data.py file. These values are available to all forms. Step 2: When creating forms, in the Form builder dialog for a component, under API tab, you can set the Property Name of a field. If you want this field to be pre-populated with the user data simply add one of the pre-defined names (found in the last step) as a Property Name . Step 3: If you want to use one piece of user data more than once in a form, you can append _ to the property name of your field. For example, if you want to use the user's name second time in a form, you can set the Property Name of the field to be name_2 . Property Name Description name first and last name of employee firstName first name of employee lastName last name of employee email email of employee address1 home address1 of employee address2 home address2 of employee officePhone office phone of employee empId employee id of employee positionTitle position title of employee depId department id of employee officeAddress1 office address1 of employee officeAddress2 office address2 of employee officeCity office city of employee officeCountry office country of employee officePostal office postal code of employee officeStateprovince office state or province of employee organization organization of employee supervisorName name of employee's supervisor supervisorEmail email of employee's supervisor supervisorPositionTitle position title of employee's supervisor","title":"Forms"},{"location":"forms/#forms","text":"","title":"Forms"},{"location":"forms/#table-of-contents","text":"Calculated Form Values Examples Auto-populate form fields","title":"Table of Contents"},{"location":"forms/#calculated-form-values","text":"If you would like a certain form field to have a calculated value based on the input from previous fields it could potentially require the use of some custom javascript code. These calculations can be made by selected the field you wish to contain the calculated value and clicking on it's gear icon. - Navigate to the Data tab at the top - Scroll down to the Calculated Value section and click to expand - This will show some general instructions on how to add calculations","title":"Calculated Form Values"},{"location":"forms/#examples","text":"","title":"Examples"},{"location":"forms/#telework-calculated-number-of-days-teleworking-in-a-week","text":"","title":"Telework Calculated \"Number of days teleworking in a week\""},{"location":"forms/#calculate-a-value-based-on-the-number-of-boxes-checked-representing-days-of-the-week","text":"The following code snippet checks each checkbox contained within the theEmployeesScheduleWillBe field of the form and adds it to the value of this field if it has been checked. value = Object.keys(data.theEmployeesTeleworkScheduleWillBe).reduce((acc, key) => { if (data.theEmployeesTeleworkScheduleWillBe[key] === true) { acc++ } return acc; },0)","title":"Calculate a value based on the number of boxes checked representing days of the week:"},{"location":"forms/#how-to-auto-populate-form-fields-with-the-user-data","text":"If you would like to automatically populate a form's field with the user's data, you can do so by adding one of the pre-defined names to a field in your form. Follow these steps to add the user's data to a field: Step 1: Look at the pre-defined values along with their names in table below or from /forms-flow-api/src/formsflow_api/models/employee_data.py file. These values are available to all forms. Step 2: When creating forms, in the Form builder dialog for a component, under API tab, you can set the Property Name of a field. If you want this field to be pre-populated with the user data simply add one of the pre-defined names (found in the last step) as a Property Name . Step 3: If you want to use one piece of user data more than once in a form, you can append _ to the property name of your field. For example, if you want to use the user's name second time in a form, you can set the Property Name of the field to be name_2 . Property Name Description name first and last name of employee firstName first name of employee lastName last name of employee email email of employee address1 home address1 of employee address2 home address2 of employee officePhone office phone of employee empId employee id of employee positionTitle position title of employee depId department id of employee officeAddress1 office address1 of employee officeAddress2 office address2 of employee officeCity office city of employee officeCountry office country of employee officePostal office postal code of employee officeStateprovince office state or province of employee organization organization of employee supervisorName name of employee's supervisor supervisorEmail email of employee's supervisor supervisorPositionTitle position title of employee's supervisor","title":"How to auto-populate form fields with the user data"},{"location":"workflows/","text":"Camunda This document contains information and HOWTOs on custom Camunda extensions made for use for the PSA Digital Journeys project. This includes things like how to send an email as part of a Camunda workflow, and how to push submissions to the ODS. Deploying Workflow to platform In order to deploy a new workflow to the platform, or update an existing one, you have to use the Camunda REST API. Instructions on how to do this using Postman , can be found in the Formsflow.ai repository . Notes baseUrl and keycloakTokenUrl should be updated to the values in the following table based on the environment you're deploying to. Environment baseUrl keycloakTokenUrl Dev https://digital-journeys-camunda-dev.apps.silver.devops.gov.bc.ca/camunda https://digital-journeys-keycloak-dev.apps.silver.devops.gov.bc.ca/auth/realms/psa-digital-journey-dev/protocol/openid-connect/token Test https://digital-journeys-camunda-test.apps.silver.devops.gov.bc.ca/camunda https://digital-journeys-keycloak-test.apps.silver.devops.gov.bc.ca/auth/realms/psa-digital-journey-test/protocol/openid-connect/token Production TBD TBD A value for the client_secret can be found using the Keycloak admin interface Environment Keycloak Admin Console Dev https://digital-journeys-keycloak-dev.apps.silver.devops.gov.bc.ca/auth/admin/psa-digital-journey-dev/console/ Test https://digital-journeys-keycloak-test.apps.silver.devops.gov.bc.ca/auth/admin/psa-digital-journey-test/console/ Production TBD Navigate to Clients -> forms-flow-bpm You can find the secret in the Credentials tab Sending submission data to the Telus operational Data Store (ODS) In order to support analytics of submission data for digital Journeys, submission data is pushed from the Formsflow application to the ODS. This can be added to a Camunda workflow by using the custom SendSubmissionToODSDelegate . This will send the given form submission (based on the formUrl execution variable), to the given ODS endpoint, with the submittors IDIR and BCGov GUID added as properties. How? Create a new Service Task in your workflow Select Java Class as the \"Implementation\" Set Java Class to org.camunda.bpm.extension.hooks.listeners.SendSubmissionToODSDelegate Add an Input Parameter named endpoint in the Input/Output tab of the service task. Set the Variable Assignment Type to \"String or Expression\" and \"Variable assignment Value\" to the name of the endpoint you want to send the submission to. Example: In case of the telework form, this is Datamart_Telework_app_telework_info . The Details Names of the fields that are sent to the ODS are taken from the \"Property Name\" found on each component in the Form Builder as seen below. All form fields are sent to the ODS as is, with the exception of any file uploads, where the file content itself is replaced with the name of the file uploaded (comma separated in case of multiple files). Execution Variables By default, the platform makes the following variables available to use in a workflow for all Submissions: Property Description applicationId Unique identifier of the application formUrl Full URL to the submission submitterName Identifier of the person submitting the application GUID BCGov GUID of the person that submitted the application (If logged in with IDIR) IDIR IDIR of the person that submitted the application (If logged in with IDIR) submissionDate Timestamp of when the application was submitted If any other properties from the submission will be used by the workflow, The org.camunda.bpm.extension.hooks.listeners.FormBPMDataPipelineListener listener needs to be added at a step before the value is to be used. This Listener, makes all values from the submission available to be used by the workflow, based on the corresponding \"Property Name\" as defined in the Form builder. How? Add a new \"Execution listener\" in the Listeners tab of a Sequence flow. Set \"Event Type\" to take , \"Listener Type\" to Java Class and \"Java Class\" to org.camunda.bpm.extension.hooks.listeners.FormBPMDataPipelineListener You can now use values from the form submission in any logic specified after the sequence flow this listener was added to.","title":"Workflows"},{"location":"workflows/#camunda","text":"This document contains information and HOWTOs on custom Camunda extensions made for use for the PSA Digital Journeys project. This includes things like how to send an email as part of a Camunda workflow, and how to push submissions to the ODS.","title":"Camunda"},{"location":"workflows/#deploying-workflow-to-platform","text":"In order to deploy a new workflow to the platform, or update an existing one, you have to use the Camunda REST API. Instructions on how to do this using Postman , can be found in the Formsflow.ai repository . Notes baseUrl and keycloakTokenUrl should be updated to the values in the following table based on the environment you're deploying to. Environment baseUrl keycloakTokenUrl Dev https://digital-journeys-camunda-dev.apps.silver.devops.gov.bc.ca/camunda https://digital-journeys-keycloak-dev.apps.silver.devops.gov.bc.ca/auth/realms/psa-digital-journey-dev/protocol/openid-connect/token Test https://digital-journeys-camunda-test.apps.silver.devops.gov.bc.ca/camunda https://digital-journeys-keycloak-test.apps.silver.devops.gov.bc.ca/auth/realms/psa-digital-journey-test/protocol/openid-connect/token Production TBD TBD A value for the client_secret can be found using the Keycloak admin interface Environment Keycloak Admin Console Dev https://digital-journeys-keycloak-dev.apps.silver.devops.gov.bc.ca/auth/admin/psa-digital-journey-dev/console/ Test https://digital-journeys-keycloak-test.apps.silver.devops.gov.bc.ca/auth/admin/psa-digital-journey-test/console/ Production TBD Navigate to Clients -> forms-flow-bpm You can find the secret in the Credentials tab","title":"Deploying Workflow to platform"},{"location":"workflows/#sending-submission-data-to-the-telus-operational-data-store-ods","text":"In order to support analytics of submission data for digital Journeys, submission data is pushed from the Formsflow application to the ODS. This can be added to a Camunda workflow by using the custom SendSubmissionToODSDelegate . This will send the given form submission (based on the formUrl execution variable), to the given ODS endpoint, with the submittors IDIR and BCGov GUID added as properties.","title":"Sending submission data to the Telus operational Data Store (ODS)"},{"location":"workflows/#how","text":"Create a new Service Task in your workflow Select Java Class as the \"Implementation\" Set Java Class to org.camunda.bpm.extension.hooks.listeners.SendSubmissionToODSDelegate Add an Input Parameter named endpoint in the Input/Output tab of the service task. Set the Variable Assignment Type to \"String or Expression\" and \"Variable assignment Value\" to the name of the endpoint you want to send the submission to. Example: In case of the telework form, this is Datamart_Telework_app_telework_info . The","title":"How?"},{"location":"workflows/#details","text":"Names of the fields that are sent to the ODS are taken from the \"Property Name\" found on each component in the Form Builder as seen below. All form fields are sent to the ODS as is, with the exception of any file uploads, where the file content itself is replaced with the name of the file uploaded (comma separated in case of multiple files).","title":"Details"},{"location":"workflows/#execution-variables","text":"By default, the platform makes the following variables available to use in a workflow for all Submissions: Property Description applicationId Unique identifier of the application formUrl Full URL to the submission submitterName Identifier of the person submitting the application GUID BCGov GUID of the person that submitted the application (If logged in with IDIR) IDIR IDIR of the person that submitted the application (If logged in with IDIR) submissionDate Timestamp of when the application was submitted If any other properties from the submission will be used by the workflow, The org.camunda.bpm.extension.hooks.listeners.FormBPMDataPipelineListener listener needs to be added at a step before the value is to be used. This Listener, makes all values from the submission available to be used by the workflow, based on the corresponding \"Property Name\" as defined in the Form builder.","title":"Execution Variables"},{"location":"workflows/#how_1","text":"Add a new \"Execution listener\" in the Listeners tab of a Sequence flow. Set \"Event Type\" to take , \"Listener Type\" to Java Class and \"Java Class\" to org.camunda.bpm.extension.hooks.listeners.FormBPMDataPipelineListener You can now use values from the form submission in any logic specified after the sequence flow this listener was added to.","title":"How?"}]}